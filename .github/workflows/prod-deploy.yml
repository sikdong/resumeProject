name: Deploy to EC2 with Temporary IP Whitelist

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Grant permission to Gradle wrapper
        run: chmod +x ./gradlew

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: application.yml 정보 넣기
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > src/main/resources/application.yml
          echo "${{ secrets.APPLICATION_PROD_YML }}" | base64 --decode > src/main/resources/application-prod.yml
          find src    

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Get GitHub Actions public IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Set environment variables
        run: |
          echo "AWS_DEFAULT_REGION=ap-northeast-3" >> $GITHUB_ENV
          echo "AWS_SG_ID=sg-08f61071d7ab164a9" >> $GITHUB_ENV 

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-3

      - name: Open SSH port temporarily for GitHub Actions IP
        run: |
          echo "Authorizing IP: ${{ steps.ip.outputs.ipv4 }}/32"
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ env.AWS_SG_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: Upload JAR to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: build/libs/resume-0.0.1-SNAPSHOT.jar
          target: /home/ubuntu/
          strip_components: 2

      - name: Restart service on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            sudo systemctl daemon-reload
            sudo systemctl restart myapp
            sudo systemctl status myapp --no-pager

      - name: Revoke IP from Security Group
        if: always()
        run: |
          echo "Revoking IP: ${{ steps.ip.outputs.ipv4 }}/32"
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ env.AWS_SG_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32
